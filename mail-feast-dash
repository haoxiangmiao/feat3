#!/usr/bin/env python
# vim: set filetype=python sw=2 sts=2 et nofoldenable :
# This is a python script.
# If you encounter problemes when executing it on its own, start it with a python interpreter
from __future__ import print_function
import sys
import os
import subprocess
import socket
import shutil
import time
import datetime
import peewee as pw
import smtplib

sys.dont_write_bytecode = True

myDB = pw.MySQLDatabase("feastdash", host="augias", port=3306, user="feastdash", passwd="feastdash")
myDB.connect()

class MySQLModel(pw.Model):
  """A base model that will use our MySQL database"""
  class Meta:
    database = myDB

class User(MySQLModel):
  username = pw.CharField()

class BranchQueue(MySQLModel):
  branch = pw.CharField()

class Run(MySQLModel):
  branch = pw.CharField()
  hostname = pw.CharField()
  build = pw.CharField()
  starttime = pw.IntegerField()
  endtime = pw.IntegerField()
  notes = pw.TextField()

class Message(MySQLModel):
  runid = pw.ForeignKeyField(Run, related_name="messages", db_column="runid")
  stage = pw.CharField()
  status = pw.CharField()
  timestamp = pw.IntegerField()
  title = pw.CharField()
  body = pw.TextField()

class Attachment(MySQLModel):
  messageid = pw.ForeignKeyField(Message, related_name="attachments", db_column="messageid")
  name = pw.CharField()
  mimetype = pw.CharField()
  data = pw.BlobField()

class Subscriber(MySQLModel):
  email = pw.CharField()

################## MAIN ######################

#TODO help, ? und guess nicht in sys.argv[0] suchen
# output help screen
if len(sys.argv) != 1 and ("help" in " ".join(sys.argv) or "?" in " ".join(sys.argv)):
  print ("This python scripts collects test results from the database and sends them via email")
  sys.exit()

dt = datetime.datetime.today()
#dt = datetime.datetime(2013, 12, 11)
starttime = datetime.datetime(dt.year, dt.month, dt.day)
endtime = datetime.datetime(dt.year, dt.month, dt.day, 23, 59)
runs = Run.select().where(Run.starttime.between(time.mktime(starttime.timetuple()), time.mktime(endtime.timetuple())))

mail_body = "Executed Runs:\n\n"
summary = ""

for run in runs:
  def get_messages(stage, status):
    return Message.select().where(Message.runid == run.id, Message.stage == stage, Message.status == status)

  mail_body += "Host: " + run.hostname + " Branch: " + run.branch + " Buildid: "+ run.build + "\n"

  mail_body += "=== CONFIGURE ===\n"
  config_warning = get_messages("configure", "warning")
  mail_body += "Warnings: " + str(config_warning.count()) + "\n"
  config_error = get_messages("configure", "error")
  mail_body += "Errors: " + str(config_error.count()) + "\n"

  mail_body += "=== BUILD ===\n"
  build_warning = get_messages("build", "warning")
  mail_body += "Warnings: " + str(build_warning.count()) + "\n"
  for i in build_warning:
    mail_body += "   " + i.title + "\n"
  build_error = get_messages("build", "error")
  mail_body += "Errors: " + str(build_error.count()) + "\n"
  for i in build_error:
    mail_body += "   " + i.title + "\n"

  mail_body += "=== TEST ===\n"
  test_failed = get_messages("test", "failed")
  mail_body += "Failed: " + str(test_failed.count()) + "\n"
  for i in test_failed:
    mail_body += "   " + i.title + "\n"
  test_passed = get_messages("test", "passed")
  mail_body += "Passed: " + str(test_passed.count()) + "\n"

  mail_body += "\n\n"

  if summary == "":
    summary += "Failed Runs:\n"
  if config_warning.count() + config_error.count() + build_warning.count() + build_error.count() + test_failed.count() > 0:
    summary += "  " + run.hostname + " " + run.branch + " "+ run.build + " C: " + str(config_warning.count()) + " " + str(config_error.count()) + " B: " + str(build_warning.count()) + " " + str(build_error.count()) + " T: " + str(test_failed.count()) + " " + str(test_passed.count()) + "\n"

if summary == "":
  summary += "None\n"
mail_body = "\n" + summary + "\n" + mail_body

mail_subject = "Subject: [FEAST-DASH] Summary Mail - "
if summary == "None\n":
  mail_subject += "All runs passed"
else:
  mail_subject += str(summary.count("\n") - 1) + " runs failed"
mail_from = "dirk.ribbrock@math.tu-dortmund.de"
mail_to = [i.email for i in Subscriber.select()]

s = smtplib.SMTP("localhost")
s.sendmail(mail_from, mail_to, os.linesep.join([mail_subject, "From: " + mail_from, "To: " + ", ".join(mail_to), mail_body]))
s.quit()
