#!/usr/bin/env python
# vim: set filetype=python sw=2 sts=2 et nofoldenable :
# This is a python script.
# If you encounter problemes when executing it on its own, start it with a python interpreter
import sys
import os
import subprocess
import socket
import shutil

from cmake_modules import is_found

def run_test(build_id, branch):
  # set track aka cdash build group
  if (branch == "master") or (branch == "develop"):
    track = branch
  else:
    track = testing

  hostname = socket.gethostname()
  src_dirname = os.path.abspath(os.path.dirname(sys.argv[0]))
  build_dirname = src_dirname + os.sep + hostname

  #prepare build dir
  shutil.rmtree(build_dirname, True)
  os.mkdir(build_dirname)
  os.chdir(build_dirname)
  #TODO different file per step
  run_log = open(build_dirname + os.sep + "run.log", "w")

  #TODO output zeit und datum
  run_log.write("hostname: " + hostname + os.linesep)
  run_log.write("dirname: " + src_dirname + os.linesep)
  run_log.flush()

  #git pull
  os.chdir(src_dirname)
  subprocess.Popen("git gc".split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  subprocess.Popen("git fetch -v".split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  subprocess.Popen(("git checkout --no-track -B test123-" + hostname + " origin/" + track).split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  os.chdir(build_dirname)

  configure_command = src_dirname + os.sep + "configure-feast " + build_id
  subprocess.Popen(configure_command.split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()

  subprocess.Popen(("ctest -D ExperimentalStart --track " + track).split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  #subprocess.Popen(("ctest -D ExperimentalUpdate --track " + track).split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()

  build_name = build_id + "-" + branch
  dart_out = ""
  dart_file = open(build_dirname + os.sep + "DartConfiguration.tcl", "r")
  for line in dart_file:
    if "BuildName" in line:
      dart_out += "BuildName: " + build_name
    else:
      dart_out += line
  dart_file.close()
  dart_file = open(build_dirname + os.sep + "DartConfiguration.tcl", "w")
  dart_file.write(dart_out)
  dart_file.close()

  subprocess.Popen(("ctest -D ExperimentalBuild -D CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS:STRING=9999 -D CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS:STRING=9999 --track " + track).split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  subprocess.Popen(("ctest -D ExperimentalTest -D CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE:STRING=9999 -D CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE:STRING=9999 --track " + track).split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  if "coverage" in build_id:
    subprocess.Popen(("ctest -D ExperimentalCoverage --track " + track).split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  subprocess.Popen(("ctest -D ExperimentalSubmit --track " + track).split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()

  run_log.close()


sys.dont_write_bytecode = True
src_dirname = os.path.abspath(os.path.dirname(sys.argv[0]))
os.chdir(src_dirname)

if not is_found("cmake"):
  print ("cmake not found! aborting...")
  sys.exit(1)
if not is_found("git"):
  print ("git not found! aborting...")
  sys.exit(1)

#TODO help, ? und guess nicht in sys.argv[0] suchen
# output help screen
if len(sys.argv) != 1 and ("help" in " ".join(sys.argv) or "?" in " ".join(sys.argv)):
  print ("This python scripts starts regression tests and submits them to a cdash server")
  sys.exit()

#gather branches to test (branches containing testing\ and master and develop)
if "check_output" not in dir( subprocess ): #deactivated as its not available bevor python 2.7
  raw_branches = subprocess.Popen(['git', 'branch', '-a'], stdout=subprocess.PIPE).communicate()[0].strip().splitlines()
else:
  raw_branches = subprocess.check_output("git branch -a", shell=True).strip().splitlines()
branches = ["master", "develop"]
raw_branches[:] = [s.strip("* ") for s in raw_branches]
for s in raw_branches[:]:
  if not "remotes/origin/" in s:
    continue
  new_s = s.replace("remotes/origin/", "")
  if "testing/" in new_s:
    branches.append(new_s)

for branch in branches[:]:
  if is_found("mpic++"):
    if is_found("g++"):
      run_test("mpi-gcc-debug-coverage-gmp-mkl", branch)
      run_test("mpi-gcc-opt-coverage-gmp-mkl", branch)
    if is_found("clang++"):
      run_test("mpi-clang-debug-gmp-mkl", branch)
      run_test("mpi-clang-opt-gmp-mkl", branch)
    if is_found("icpc"):
      run_test("mpi-icc-debug-mkl", branch)
      run_test("mpi-icc-opt-mkl", branch)

  if is_found("g++"):
    run_test("serial-gcc-debug-coverage-gmp-mkl", branch)
    run_test("serial-gcc-opt-coverage-gmp-mkl", branch)
  if is_found("clang++"):
    run_test("serial-clang-debug-gmp-mkl", branch)
    run_test("serial-clang-opt-gmp-mkl", branch)
  if is_found("icpc"):
    run_test("serial-icc-debug-mkl", branch)
    run_test("serial-icc-opt-mkl", branch)
