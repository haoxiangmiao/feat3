#!/usr/bin/env python
# vim: set filetype=python sw=2 sts=2 et nofoldenable :
# This is a python script.
# If you encounter problemes when executing it on its own, start it with a python interpreter
import sys
import os
import subprocess
import socket
import shutil

from cmake_modules import is_found

def run_test(build_id):
  hostname = socket.gethostname()
  src_dirname = os.path.abspath(os.path.dirname(sys.argv[0]))
  build_dirname = src_dirname + os.sep + hostname

  #prepare build dir
  shutil.rmtree(build_dirname, True)
  os.mkdir(build_dirname)
  os.chdir(build_dirname)
  #TODO different file per step
  run_log = open(build_dirname + os.sep + "run.log", "w")

  #TODO output zeit und datum
  run_log.write("hostname: " + hostname + os.linesep)
  run_log.write("dirname: " + src_dirname + os.linesep)
  run_log.flush()

  #git pull
  #os.chdir(src_dirname)
  #subprocess.Popen("git pull origin".split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  #os.chdir(build_dirname)

  configure_command = src_dirname + os.sep + "configure-feast " + build_id
  subprocess.Popen(configure_command.split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()

  subprocess.Popen("ctest -D NightlyStart".split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  subprocess.Popen("ctest -D NightlyUpdate".split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()

  build_name = build_id
  dart_out = ""
  dart_file = open(build_dirname + os.sep + "DartConfiguration.tcl", "r")
  for line in dart_file:
    if "BuildName" in line:
      dart_out += "BuildName: " + build_name
    else:
      dart_out += line
  dart_file.close()
  dart_file = open(build_dirname + os.sep + "DartConfiguration.tcl", "w")
  dart_file.write(dart_out)
  dart_file.close()

  subprocess.Popen("ctest -D NightlyBuild -D CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS:STRING=9999 -D CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS:STRING=9999".split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  subprocess.Popen("ctest -D NightlyTest".split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  if "coverage" in build_id:
    subprocess.Popen("ctest -D NightlyCoverage".split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()
  subprocess.Popen("ctest -D NightlySubmit".split(), bufsize=-1, stdout=run_log, stderr=subprocess.STDOUT).wait()

  run_log.close()


#TODO check for git, cmake, ctest and report missing tools
sys.dont_write_bytecode = True
if not is_found("cmake"):
  print ("cmake not found! aborting...")
  sys.exit(1)
if not is_found("git"):
  print ("git not found! aborting...")
  sys.exit(1)

#TODO help, ? und guess nicht in sys.argv[0] suchen
# output help screen
if len(sys.argv) != 1 and ("help" in " ".join(sys.argv) or "?" in " ".join(sys.argv)):
  print ("This python scripts starts regression tests and submits them to a cdash server")
  sys.exit()

if is_found("mpic++"):
  run_test("mpi-gcc-debug-coverage-gmp-mkl")
  run_test("mpi-gcc-opt-coverage-gmp-mkl")
  if is_found("clang++"):
    run_test("mpi-clang-debug-gmp-mkl")
    run_test("mpi-clang-opt-gmp-mkl")
  run_test("mpi-icc-debug-mkl")
  run_test("mpi-icc-opt-mkl")

run_test("serial-gcc-debug-coverage-gmp-mkl")
run_test("serial-gcc-opt-coverage-gmp-mkl")
if is_found("clang++"):
  run_test("serial-clang-debug-gmp-mkl")
  run_test("serial-clang-opt-gmp-mkl")
run_test("serial-icc-debug-mkl")
run_test("serial-icc-opt-mkl")
