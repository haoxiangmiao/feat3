/** \page preproc_macros Preprocessor Macros
This page summarises the preprocessor macros defined by the build-system, the compiler detection or the user.

\tableofcontents

\section preproc_sec_build_system Build-System Macros
This section enlists the macros defined directly by the buildsystem, specifying the current build mode.

For macros specifying the available third-party libraries and backends, see \ref preproc_sec_backends

<hr>
\subsection ppm_feast_debug_mode FEAST_DEBUG_MODE
This macro is defined if the corresponding build is a debug build.
If defined, the kernel base-header defines the <c>DEBUG</c> macro.

<hr>
\subsection ppm_feast_serial_mode FEAST_SERIAL_MODE
This macro is defined if the corresponding build is a serial build.
If defined, the kernel base-header defines the <c>SERIAL</c> macro.

<hr>
\subsection ppm_visual_studio VISUAL_STUDIO
This macro is defined as 1 by the <i>hand-made</i> Visual Studio project files. It must be left undefined by the CMake
and any other build system, independent of whether the MS VC++ compiler is used or not.

<hr>
\subsection ppm_feast_src_dir FEAST_SRC_DIR
This macro contains a string literal specifying the full absolute path to the root source directory.

<hr>
\subsection ppm_feast_binary_dir FEAST_BINARY_DIR
This macro contains a string literal specifying the full absolute path to the root binary directory.

<hr>
\subsection ppm_feast_build_id FEAST_BUILD_ID
This macro contains a string literal specifying the user provided build id string, that was passed to the configure_feast script.

<hr>
\subsection ppm_feast_cpu_type FEAST_CPU_TYPE
This macro contains a string literal describing the detected target cpu type.

<hr>
\subsection ppm_feast_system_host_compiler FEAST_SYSTEM_HOST_COMPILER
The system compiler the actual host compiler will rely on, e.g. using its header files etc.

<hr>
\subsection ppm_feast_cuda_host_compiler FEAST_CUDA_HOST_COMPILER
The host compiler that will be used by nvcc for host code compilation.

<hr>
\subsection ppm_cmake_cxx_compiler_id CMAKE_CXX_COMPILER_ID
Descriptive compiler name, as detected by cmake.

<hr>
\subsecion ppm_cmake_cxx_compiler_version CMAKE_CXX_COMPILER_VERSION
Compiler version, as detected by cmake.

<hr>
\subsection ppm_cmake_cxx_compiler CMAKE_CXX_COMPILER
Path to the used host compiler.

<hr>
\subsection ppm_feast_compiler_wrapper FEAST_USE_COMPILER_WRAPPER
This macro indicates, if defined, that a compiler wrapper like ccache or distcc is used to compile FEAST.

<hr>
\subsection ppm_cmake_cxx_compiler_arg1 CMAKE_CXX_COMPILER_ARG1
Contains the 'real' compiler, if we use a COMPILER_WRAPPER.
Is empty, if we don't.

<hr>
\subsection ppm_cmake_cxx_compiler_arg1_path CMAKE_CXX_COMPILER_ARG1_PATH
Path to CMAKE_CXX_COMPILER_ARG1, if any.

<hr>
\subsection ppm_cmake_cxx_flags CMAKE_CXX_FLAGS
The CXXFLAGS of the host compiler.

<hr>
\subsection ppm_cuda_nvcc_executable CUDA_NVCC_EXECUTABLE
Path to the used nvcc compiler.

<hr>
\subsection ppm_cuda_nvcc_flags CUDA_NVCC_FLAGS
The CXXFLAGS of the nvcc compiler.

<hr>
\subsection ppm_cuda_arch FEAST_CUDA_ARCH
Compile for this CUDA device architecture

<hr>
\subsection ppm_feast_hostname FEAST_HOSTNAME
Hostname of the computer in use.

<hr>
\subsection ppm_cmake_command CMAKE_COMMAND
Full path of the cmake binary.

<hr>
\subsecion ppm_cmake_generator CMAKE_GENERATOR
The 'makefile' generator used by cmake.

<hr><hr>
\section preproc_sec_comp_detect Compiler-Detection Macros
This section enlists the macros defined by the compiler detection headers to provide information about the compiler
and its version being in use.

For macros specifying the compiler's C++ language capabilities, see \ref preproc_sec_cpp_features

<hr>
\subsection ppm_feast_compiler FEAST_COMPILER
This macro is defined by the compiler detection system and its value is a string literal specifying the name and
possibly the version of the compiler in use, e.g. <code>"Microsoft Visual C++ 2012"</code>.

\note This macro may also be defined the user through the build system, which will effectively disable the internal
compiler detection system.

<hr>
\subsection ppm_feast_compiler_gnu FEAST_COMPILER_GNU
This macro is defined if the GNU C++ compiler is detected. Its value is defined as
\verbatim
(__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
\endverbatim
which is a constant integral expression identifying the compiler version, e.g. the value <c>40702</c> identifies the
G++ 4.7.2 compiler. See the compiler's documentation for details.

<hr>
\subsection ppm_feast_compiler_intel FEAST_COMPILER_INTEL
This macro is defined if the Intel C++ compiler is detected. Its value coindices with the compiler's internal macro
<c>__INTEL_COMPILER</c>, which is a constant integral expression identifying the compiler version, e.g. the value
<c>1210</c> identifies the Intel C++ 12.1 compiler. See the compiler's documentation for details on this macro.

<hr>
\subsection ppm_feast_compiler_microsoft FEAST_COMPILER_MICROSOFT
This macro is defined if the Microsoft Visual C++ compiler is detected. Its value coincides with the compiler's internal
macro <c>_MSC_VER</c>, which is an constant integral expression identifying the compiler version, e.g. the value
<code>1700</code> identifies the Visual C++ 2012 compiler. See the compiler's documentation for details on this macro.

<hr>
\subsection ppm_feast_compiler_open64 FEAST_COMPILER_OPEN64
This macro is defined if the Open64 C++ compiler is detected. Its value is defined as
\verbatim
(__OPENCC__ * 10000 + __OPENCC_MINOR__ * 100 + __OPENCC_PATCHLEVEL__)
\endverbatim
which is a constant integral expression identifying the compiler version, e.g. the value <c>40204</c> identifies the
Open64 C++ 4.2.4 compiler. See the compiler's documentation for details.

<hr>
\subsection ppm_feast_compiler_oracle FEAST_COMPILER_ORACLE
This macro is defined if the OracleStudio/SunStudio C++ compiler is detected. Its value coincides with the compiler's
internal macro <c>__SUNPRO_CC</c>, which is an constant integral expression identifying the compiler version, e.g. the
value <code>0x5110</code> identifies the OracleStudio C++ 12.2 compiler. See the compiler's documentation for details
on this macro.

<hr>
\subsection ppm_feast_compiler_pgi FEAST_COMPILER_PGI
This macro is defined if the PGI C++ compiler is detected. Unfortunately, it is not known if the compiler's version can
be deduced at compile-time, therefore this macro is simply defined as 1.

<hr>
\subsection ppm_feast_ivdep FEAST_IVDEP
This macro can be used to instruct the compiler to ignore assumed vector dependencies. To use this loop pragma, place it
immediately before - not in - a loop definition. The pragma takes effect for the scope of the loop that follows it.

<hr>
\subsection ppm_feast_force_inline FORCE_INLINE
This macro can be used to force the compiler to compile a function inline. The semantics of FORCE_INLINE are exactly the
same as those for the C++ inline keyword.

<hr><hr>
\section preproc_sec_backends Backend / Library Macros
This section enlists macros defined by the build system, which specify what types of third-party libraries and backends
are available to FEAST.

<hr>
\subsection ppm_feast_backends_cuda FEAST_BACKENDS_CUDA
This macro is defined by the build system if the FEAST kernel is linked against the CUDA library.

If defined, the LAFEM subsystem of the FEAST kernel will offer corresponding specialisations for the containters and
operations using CUDA as a work-horse.

<hr>
\subsection ppm_feast_backends_mkl FEAST_BACKENDS_MKL
This macro is defined by the build system if the FEAST kernel is linked against the Intel MKL library.

If defined, the LAFEM subsystem of the FEAST kernel will offer corresponding specialisations for the operations using
the MKL as a work-horse.

<hr>
\subsection ppm_feast_have_umfpack FEAST_HAVE_UMFPACK
This macro is defined by the build system if the FEAST kernel is linked agains the UMFPACK library.

If defined, the LAFEM subsystem of the FEAST kernel will implement the "LAFEM::Umfpack" solver class.

\note The Visual Studio build system detects whether an umfpack library suitable for the current build-id
has been compiled and linked. If so, it will define the FEAST_HAVE_UMFPACK macro automatically.

<hr>
\subsection ppm_feast_have_alglib FEAST_HAVE_ALGLIB
This macro is defined by the build system if the FEAST kernel is linked against the ALGLIB library.

<hr>
\subsection ppm_feast_have_quadmath FEAST_HAVE_QUADMATH
This macro is defined by the build system if the FEAST kernel has support for quadmath datatypes.
The datatypes name is __float128.

<hr>
\subsection ppm_feast_mpi FEAST_MPI
This macro is defined by the build system if the FEAST kernel is linked against a MPI library.

<hr><hr>
\section preproc_sec_user_def User-Defineable Macros
This section enlists miscellaneous macros that can be defined by the user via the build-system to affect various parts
of the FEAST kernel.

<hr>
\subsection ppm_feast_index_ull FEAST_INDEX_ULL
This macro can be defined to affect the definition of the <c>FEAST::Index</c> data type in the kernel base-header.

<b>Effects:</b><br>
If undefined, <c>FEAST::Index</c> is a typedef for <c>unsigned long</c>.<br>
If defined, <c>FEAST::Index</c> is a typedef for <c>unsigned long long</c>.

<hr>
\subsection ppm_feast_no_config FEAST_NO_CONFIG
This macro can be defined to avoid config-header inclusion in the kernel base-header.

\note This macro is automatically defined by the Visual Studio build system.

<b>Effects:</b><br>
If undefined, the kernel base-header will include the header <code>feast_config.hpp</code> from the FEAST root directory
at the beginning of the file.

<hr>
\subsection ppm_feast_no_context FEAST_NO_CONTEXT
This macro can be defined to disable the context stack for the exception system.

\note This macro is automatically defined by the Visual Studio build system.

<b>Effects:</b><br>
If defined, the context back-trace for the exception and assertion system is disabled.

<hr>
\subsection ppm_feast_stdc_assert FEAST_STDC_ASSERT
If this macro is defined, the \c ASSERT macro is defined to call the \c assert macro from the standard C libary.

Depending on the compiler and its corresponding runtime library, the standard \c assert macro can trigger a breakpoint
which enables the user to attach a debugger and jump directly into the assertion, even if the program was not started
from within the debugger directly.

\note This macro is automatically defined by the Visual Studio build system, as this allows the user to attach the
Visual Studio debugger to a program which fired an assertion.

<hr>
\subsection ppm_feast_trace_context FEAST_TRACE_CONTEXT
This macro can be defined to enable live-tracing of the context stack.

<b>Effects:</b><br>
If defined, the context live-trace system is enabled.

<hr><hr>
\section preproc_sec_misc Miscellaneous Macros
This section enlists various macros which do not fit into any other section.

\subsection ppm_feast_warnings FEAST_DISABLE_WARNINGS / FEAST_RESTORE_WARNINGS
This macro pair can be used to modify the compiler's diagnostics settings to suppress warnings for the inclusion of
third-party header includes.

\attention This macro pair is meant only for third-party includes and shall \b not be used to suppress warning arising
from FEAST code!

\note This macro pair may not be supported by all compilers. Furthermore, some warnings cannot be disabled, so there is
no guarantee that the compiler will remain quiet even if this macro pair is in use.

<b>Example:</b><br>
\code{.cpp}
#include <kernel/base_header.hpp>

// suppress warnings for third-party header
FEAST_DISABLE_WARNINGS

// include third-party header producing compiler warnings
#include <thirdparty/some_library/wicked_header.h>

// restore previous diagnostics settings
FEAST_RESTORE_WARNINGS

// ...
\endcode
**/
