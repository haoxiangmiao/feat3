/** \page feat_for_windows FEAT for Visual Studio 2015 on Windows systems
This page describes the FEAT Visual Studio 2015 build system for Windows systems.

\tableofcontents

\section windows_prereqs Prerequisites
\subsection windows_prereqs_vs Microsoft Visual Studio 2015
To compile and use FEAT under windows, you will at lease require <b>Microsoft Visual Studio 2015</b> (any edition) as
well as the latest update. Note that the "free" <em>Community</em> edition of Visual Studio 2015 is perfectly sufficient.

For information about legal ways to obtain a copy of Visual Studio, contact your supervisor or visit the following site:
- https://www.visualstudio.com/downloads/download-visual-studio-vs

If you are a member of a university that cooperates with Microsoft (such as TU Dortmund), you may as well checkout
Microsoft's official page https://www.dreamspark.com to obtain a student license for Visual Studio 2015.

\note
If you want compile 64-bit binaries, you may also have to manually select the <em>x64 Compilers and Tools</em> option
during the Visual Studio 2015 setup (I don't remember anymore whether this option is selected by default).

Furthermore, you will need to install the latest update for Visual Studio 2015, as the original release had some
compiler bugs that would prevent you from successfully compiling FEAT.
- As of 2016-09-06, the lastest update is <em>Update 3</em>, which can be downloaded at
  - https://go.microsoft.com/fwlink/?LinkId=691129
- You may also check the official <em>Visual Studio Blog</em> for more recent updates:
  - https://blogs.msdn.microsoft.com/visualstudio

\subsection windows_prereqs_mpi Microsoft MPI
If you want to make use of FEAT's parallel computing capability, you will also need to install the <b>Microsoft MPI</b>
library as well as the corresponding SDK. Note that installing MPI is <b>not</b> mandatory, however, without this
library, FEAT is limited to its "single-process" functionality.

\note
Previous attempts to support other MPI implementations such as <c>MPICH</c> or <c>OpenMPI</c> in combination with
Visual Studio have not been successful, so these (and other) implementations are officially unsupported by the FEAT
Visual Studio build-system. Sorry for the inconvenience.

You can download the latest version of the MS-MPI library here:
 - As of 2016-09-06, the lastest MS-MPI version is 7.1, which was successfully tested with FEAT and can be downloaded at
   - https://www.microsoft.com/en-us/download/details.aspx?id=52981
 - <b>Important:</b> You need to download and install <b>both</b> files <c>MSMpiSetup.exe</c> and <c>msmpisdk.msi</c>.
 - You can also check for newer versions of MS-MPI at:
   - https://msdn.microsoft.com/en-us/library/bb524831.aspx

\note
From MS-MPI Version 7 on, you will need to enable the <em>MS-MPI Launch Service</em> to <em>start automatically</em>
on your windows machine, as otherwise MPI-based applications may not start. The easiest way to do so is to execute
the following command in a console (with administrator rights):
\verbatim
sc config MsMpiLaunchSvc start= auto
\endverbatim

Once you have installed MS-MPI and setup the launch service, there is nothing more to do, as the build-system will
automatically detect that a MPI implementation is available.

\subsection windows_prereqs_cuda Nvidia CUDA
Nvidia CUDA is currently not supported by the FEAT Visual Studio build system.

\subsection windows_prereqs_imkl Intel MKL
Intel MKL is currently not supported by the FEAT Visual Studio build system.

\section windows_thirdparty Additional Third-Party Libraries
FEAT supports a set of third-party libraries, which can be included to extend the functionality offered by FEAT.
Note that all third-party libraries are <em>opt-in</em>, i.e. you are not forced to use any of these libraries, but you
may as well use FEAT without any additional libraries (a.k.a. "naked build") -- the drawback is that you will only have
reduced functionality, of course.

This page enlists all third-party libraries supported by the Visual Studio build-system as well as instructions that
describe what has to be done to use these libraries.

The third-party libraries that are listed in the following sections are build from a source distribution which can be
downloaded as ZIP/TAR/Gzip archives from the homepages of the corresponding libraries. To use one or multiple of the
following libraries, you will have to perform the following steps:
-# Download and unpack the source archive(s) of the corresponding libraries. See the following subsections for details.
-# Once all desired library sources have been unpacked, execute the <c>make_win32.cmd</c> and/or <c>make_win64.cmd</c>
   scripts located in the <c>thirdparty</c> directory to build and link all downloaded libaries for 32-bit and/or 64-bit.
-# Once the libraries are compiled, you are ready to use the corresponding FEAT classes. The build-system automatically
   detects which libraries have been compiled and enables the corresponding classes, so that no further manual setup
   is required.

\subsection windows_thirdparty_alglib ALGLIB
<c>ALGLIB</c> is a library that is used by FEAT to offer an additional set of linear and non-linear solvers.
- Lastest tested Version: 3.10.0 (C++ free GPL edition)
- Download Link: http://www.alglib.net/download.php

<b>Instructions:</b>
-# Download the ZIP-Archive and unpack its contents into the directory <c>thirdparty\\ALGLIB</c>.
-# After unpacking, the <c>thirdparty</c> directory should have the following sub-directory structure:
\verbatim
thirdparty
  ALGLIB
    cpp
      src
      tests
  ...
\endverbatim

\subsection windows_thirdparty_fparser fparser
<c>fparser</c> is a library that offers a lightweight function interpreter, which is used by the
FEAT::Analytic::ParsedFunction class to parse and evaluate expressions specified at runtime. This library is e.g. used
by and demonstrated in Tutorial 04.
- Lastest tested Version: 4.5.2 (from 2015-07-07)
- Download Link: http://warp.povusers.org/FunctionParser

<b>Instructions:</b>
-# Download the ZIP-Archive and unpack its contents into the directory <c>thirdparty\\fparser</c>.
-# After unpacking, the <c>thirdparty</c> directory should have the following sub-directory structure:
\verbatim
thirdparty
  fparser
    docs
    examples
    extrasrc
    mpfr
  ...
\endverbatim

\subsection windows_thirdparty_parmetis ParMETIS
<c>ParMETIS</c> is a library that offers graph partitioning algorithms used by FEAT to compute domain decompositions for
parallel (i.e. MPI-based) applications.
- Lastest tested Version: 4.0.3 (from 2013-03-30)
- Download Link: http://glaros.dtc.umn.edu/gkhome/metis/parmetis/download

<b>Instructions:</b>
-# Download the GZ-Archive and unpack its contents into the directory <c>thirdparty</c>.
-# Rename the sub-directory from <c>parmetis-4.0.3</c> (or whatever version you have downloaded) to <c>parmetis</c>.
-# The <c>thirdparty</c> directory should now have the following sub-directory structure:
\verbatim
thirdparty
  parmetis
    build
    Graphs
    include
    ...
  ...
\endverbatim


\subsection windows_thirdparty_suitesparse SuiteSparse (UMFPACK)
<c>SuiteSparse</c> is a library collection that offers various algorithms for sparse linear systems. Currently, the
only component of the <c>SuiteSparse</c> library is <c>UMFPACK</c>, a direct linear solver for CSR matrices, which
is used by the FEAT::Solver::Umfpack and FEAT::Solver::UmfpackMean classes.
- Lastest tested Version: 4.5.3
- Download Link: http://faculty.cse.tamu.edu/davis/suitesparse.html

<b>Instructions:</b>
-# Download the GZ-Archive and unpack its contents into the directory <c>thirdparty\\SuiteSparse</c>.
-# After unpacking, the <c>thirdparty</c> directory should have the following sub-directory structure:
\verbatim
thirdparty
  SuiteSparse
    AMD
    bin
    ...
    UFget
    UMFPACK
  ...
\endverbatim

\section windows_vcgen_tool Creating Visual Studio Project and Solution files
Before you can compile any FEAT application, test or tutorial  with Visual Studio, you will first need generate a
corresponding Visual Studio project and solution file. In contrast to the CMake-based build-system used under Linux,
there is no "configure" script that will generate all required projects and solution in one step.

Instead, you need to generate VS project and solution files for each desired application, tutorial or kernel test
separately by using a tool named <c>vc14_gen</c>.
Before you can use this tool, you need to compile it -- this step is described in the next sub-section.

The usage and the behaviour of the tool depends on whether the desired target is a kernel test or any other sort of
application (this includes tutorials and tools). The usage of the tool is also described in the following sub-sections.

\subsection windows_vcgen_build Building the vc14_gen Tool
Simply open the <c>vc14_gen.sln</c> solution file, which is located in the <c>tools\\vc14_gen</c> directory, and build
the solution. There is only one platform and one configuration available, so there is nothing special to keep in mind
here.

Once compiled, the command line binary <c>vc14_gen.exe</c> will appear in the FEAT root directory.

\subsection windows_vcgen_use_app Generating Application Projects
To generate a project file for any sort of application (this includes tutorials and tools), open a console in the
FEAT root directory. The basic command to generate a project file is:
\verbatim
vc14_gen.exe <project-path> <project-name>
\endverbatim

<b>Example:</b>\n
To generate a project file for the first tutorial and compile it, you will need to perform the following steps:
-# Open a console in the FEAT root directory.
-# Enter the following command to create the project file <c>tutorial-01-poisson.vc14.vcxproj</c> as well as the
corresponding solution file <c>tutorial-01-poisson.vc14.sln</c> residing in the <c>tutorials</c> directory:
\verbatim
vc14_gen.exe tutorials tutorial-01-poisson
\endverbatim
-# Open the new solution file. This solution file will contain two projects:
  - The application project <c>tutorial-01-poisson.vc14</c>
  - The FEAT kernel project <c>kernel.vc14</c>
-# Add the corresponding source file <c>tutorial_01_poisson.cpp</c> to the application project.
-# Choose a build target platform and configuration, e.g. the debug configuration namend <c>dbg</c> for the 32-bit
   platform <c>x86</c>.
-# Build the solution.
-# The resulting executable application binary <c>tutorial-01-poisson.vc14-dbg-x86.exe</c> will appear in the <c>win</c>
   sub-directory of the FEAT root directory.

\subsection windows_vcgen_use_test Generating Kernel Test Projects
The basic command to generate a project file for a kernel unit test is:
\verbatim
vc14_gen.exe -test <test-file-path>
\endverbatim
This command will create a directory named <c>testing</c> in the FEAT root directory, which contains the corresponding
project and solution file, possibly in a sub-directory that coincides with the path of the test source file within
the <c>kernel</c> subdirectory.

<b>Example:</b>\n
To generate a project file for the <c>tiny_algebra-test</c>, which is implemented in the source file
<c>kernel\\util\\tiny_algebra-test.cpp</c>, you will need to perform the following steps:
-# Open a console in the FEAT root directory.
-# Enter the following command to create the project file <c>tiny_algebra-test.vc14.vcxproj</c> as well as the
corresponding solution file <c>tiny_algebra-test.vc14.sln</c> residing in the <c>testing\\util</c> directory:
\verbatim
vc14_gen.exe -test kernel\util\tiny_algebra-test.cpp
\endverbatim
-# Open the solution file <c>testing\\util\\tiny_algebra-test.vc14.sln</c>
   - Note: In contrast to application projects, the corresponding source file is added to the project automatically.
-# Choose a build target platform and configuration, e.g. the debug configuration namend <c>dbg</c> for the 32-bit
   platform <c>x86</c>.
-# Build the solution.
-# The resulting executable test binary <c>tiny_algebra-test.vc14-dbg-x86.exe</c> will appear in the <c>win</c>
   sub-directory of the FEAT root directory.

\subsection windows_kernel_project The kernel Project file
All solution files generated by the <c>vc14_gen</c> tool contain two projects: one project for the actual target
binary as well as one project for the FEAT kernel library named <c>kernel.vc14</c>.
This kernel project file is \em not generated by the <c>vc14_gen</c> tool -- it is a hand-written project file that
is located in the <c>kernel</c> directory and it is shared among all target applications.

\attention
Do \b not add or remove files to/from the kernel project file. This project is configured to automatically include
\em all relevant source and header files within the \c kernel directory, i.e. the project will detect new or deleted
files automatically without any explicit modification from the user.

\attention
Furthermore, it is highly recommended to leave the compiler options specified in the \c kernel project unchanged.

\section windows_build_config Build Configurations and Platforms
The project and solution files generated by the <c>vc14_gen</c> tool contain a set of supported build configurations
and platforms, which can be selected in the Visual Studio IDE to specify the build target.

Supported Platforms are:
- <c>x86</c>: create 32-bit binaries (Win32)
- <c>x64</c>: create 64-bit binaries (Win64)

\note
To compile and run 64-bit builds, you (obviously) need
-# a x86-64 CPU (aka "AMD64" aka "Intel 64" aka "EM64T")
-# a 64-bit Windows OS
-# the 64-bit Visual C++ compiler


The set of supported build configurations is given as thew cross-product of various enabled features, where the name
of the build configuration is a string containing \em tags, which represent the corresponding features.
This is quite similar to the <em>build-id</em> concept of the \c configure script for Lunix systems.

The list of all supported (and currently disabled) features is:
- <c>dbg</c>: generate a debug binary (mutually exclusive with <c>opt</c>)
- <c>opt</c>: generate an optimised binary (mutually exclusive with <c>dbg</c>)
- <c>mpi</c>: build with MPI support (requires MS-MPI to be installed)
- <c>omp</c>: build with OpenMP support (currently not available)
- <c>mkl</c>: build with Intel MKL support (currently not available)
- <c>cuda</c> build with Nvidia CUDA support (currently not available)

So, for example the configuration <c>dbg</c> represents a simple debug build without any additional features such as
MPI or CUDA, whereas <c>opt-mpi</c> represents an optimised build including MPI support.

The filename of a compiled application binary is then concatenated of the project name, the build configuration and
the target platform. This enables you to compile and use various build configurations for different target platforms
side-by-side without having to recompile.

For example, the application binary filename <c>tutorial-01-poisson.vc14-dbg-mpi-x86.exe</c> represents:
- the binary of the project <c>tutorial-01-poisson</c>
- compiled with the \c vc14 compiler (aka Visual C++ 2015)
- build with the <c>dbg-mpi</c> configuration
- for the \c x86 target platform

\author Peter Zajac
**/