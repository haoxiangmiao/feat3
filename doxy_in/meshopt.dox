/**
\page meshopt_design Description of the mesh optimisation tools

\section basic_overview Basic overview

The Meshopt namespace contains all tools for mesh optimisation and mesh smoothing. These two terms are used synonymously. The baseclass is \ref FEAST::Meshopt::MeshSmoother and shall be used for illustrational purposes in this section.

A MeshSmoother always refers to exactly one mesh, contains a reference to it and can modify exactly this mesh and nothing more. The main use cases are:

 -# The mesh is moving, where only the boundary movement is known (i.e. decoupled fluid-structure interactions, Navier Stokes with free capillary boundary etc.).

  Then this movement has to be continued to the interiour of the computational domain. In finite element and math terminology: If the boundary movement is a function with "enough regularity", then it is the trace of a function on the whole domain and we can find one possible preimage by constructing an inverse trace operator.

  The most simple example for this to solve
  \f[ - \Delta u = 0 ~ \mathrm{in} ~ \Omega, u = u_D ~\mathrm{on}~ \partial \Omega \f]
  with finite element tools on the FE space the transformation is from, where \f$ u_D \f$ are the new boundary coordinates. The solution then contains the new vertex coordinates in the interiour.

  This is also called Laplacian smoothing and is done by the \ref FEAST::Meshopt::LaplaceSmoother. The boundary coordinates \f$ u_D \f$ are then the trace of the FE function \f$ u \f$ on \f$ \partial \Omega \f$ and the solving of the above problem was the application of one possible inverse trace operator. The solution is also the minimiser of the harmonic energy on the space with the appropriate boundary values.

 -# A given mesh is to be improved according to some quality measure.

  This quality measure needs to be a functional defined in terms geometric quantities. There are some regularity assumptions that need to hold, i.e. we need to be able to compute the first order derivatives with regard to the mesh vertices.

  One example is \e r-adaptivity, where mesh vertices are moved so that the mesh's cells are smaller in a region of interest (also called mesh condensation). This is implemented in the \ref FEAST::Meshopt::RumpfSmootherLevelsetConcAnalytic class, which uses an explicitly given analytic levelset function to define the region of interest (i.e. a circle), a mesh concentration function which maps a distance to a desired cell volume and then minimises a highly nonlinear polyconvex energy functional to obtain an optimised mesh.

 -# For a given mesh and an implicitly defined surface, mesh vertices/edges/faces are to be aligned to the surface

  This is usually used in conjunction with a quality measure that makes sure the alignment does not lead to a deterioration of the mesh. This functionality is implemented i.e. in the class FEAST::Meshopt::RumpfSmootherLevelSet. How well this works depends on the shape type (\ref FEAST::Shape) of the mesh. Due to topological reasons, alignment to facets is possible for FEAST::Shape::Simplex, but not for FEAST::Shape::Hypercube, although alignment to mesh vertices is possible in that case.

These use cases are in no way disjoint: There are cases of moving meshes with an implicitly defined surface, to which the mesh needs to be aligned and also condensated near the surface, all while ensuring that the mesh does not deteriorate.

\section workflow Workflow

After using a suitable constructor to build a MeshSmoother, one usually has to call init(), which performs all one-time initialisations. A call to prepare() then prepares the MeshSmoother for its application to the mesh, which can be performed by then calling optimise(). In the case of nonlinear MeshSmoothers (i.e. FEAST::Meshopt::RumpfSmoother), prepare() needs to be called in each iteration. To illustrate this:
 - for FEAST::Meshopt::LaplaceSmoother (or any linear variational smoother), init() performs the symbolic assembly of the system matrix. prepare() performs the numeric assembly and thus needs to be called whenever the mesh changes
 - for FEAST::Meshopt::RumpfSmootherLevelsetConcAnalytic(), init() and prepare() perform the same operations, like evaluating the distance to the implicitly defined surface, computing the mesh concentration and from this, the target cell sizes.

Every MeshSmoother has a copy of the mesh's coordinates calls \c _coords. This can be modified from outside (i.e. to set the boundary conditions \f$ u_D \f$) and is used in the mesh optimisation process. When optimise() finishes, this is copied back to the the underlying mesh, although in the case of nonlinear iterations (where terms have to be evaluated on the mesh returned by the last iteration) it can happen earlier.

\section imp_classes Implemented classes

Currently there are two main classes of MeshSmoothers:
 -# Linear variational mesh smoothers, which solve a linear PDE problem using finite elements, like
  - FEAST::Meshopt::LaplaceSmoother
  - FEAST::Meshopt::DuDvSmoother

 -# Rumpf smoothers, which minimise highly nonlinear polyconvex energy functionals, see \cite Rum96, like
  - FEAST::Meshopt::RumpfSmoother
  - FEAST::Meshopt::RumpfSmootherLevelset
  - FEAST::Meshopt::RumpfSmootherLevelsetAnalytic
  - FEAST::Meshopt::RumpfSmootherLevelsetConcAnalytic

For more information on mesh optimisation, refer to \cite HR11.

**/
