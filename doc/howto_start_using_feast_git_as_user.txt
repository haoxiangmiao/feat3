# HowTo Start Using the FEAST Git Repository

# Step 1
# Ensure you are member of the group "feastgit", numeric id is 3001
ssh -p 22122 <own account>@<some host in our network>.mathematik.tu-dortmund.de
groups | grep feastgit
# => output should be non-empty. If empty and you did re-login, ask Christian
#    to add you to the feastgit gorup

# Step 2
# Ensure git is available
which git
# => should not return an error. Git is currently available on most
#    Linux based hosts at the Faculty of Mathematics, i.e. all Ubuntu 9.10
#    64bit and openSuSE 11.1 32bit hosts.

# Step 3
# Checkout FEAST Git repository
mkdir feast.git.working.copy
cd feast.git.working.copy
git clone ssh://<own account>@<some Linux host in our network>.mathematik.tu-dortmund.de:22122/home/user/gitlsiii/feast.git .

# Step 4
# Get and install commit template to avoid having to reword commit messages
# because they are rejected by the master repository on push. Unlike in CVS,
# the template is not automatically installed, but has to be configure for
# every cloned repository anew.
cp /home/user/gitlsiii/feast.git/commit-template .git
git config commit.template .git/commit-template

# Step 5
# The FEAST Git repository enforces a style guide on commits and commit
# messages. To avoid situations where commits that were successfully made
# locally are rejected when pushed to the server because they violate the style
# guide, it is recommended to set one's local git repository up such that the
# same style guide is enforced there, too. Otherwise, when rejected by the
# server, one would have to reword every commit prior to being able to push it
# (How to do that: git rebase -i HEAD~20, mark all commits to be pushed to be
# reworded, reword them, then push them.)
cd .git/hooks
git init
git pull .. remotes/origin/hooks
cd ../..

# Step 6
# Set your user name and email address. When you use the "-s" option
# (signed-off-by) when committing (which is recommended), then your name is
# automatically appended to the commit message.
git config --global user.name "Your Name"
git config --global user.email you@yourdomain.example.com

# Step 7
# Edit files, commit them locally (see also "Commit Rules" below), e.g.:
#   touch foo.hpp bar.cpp
#   git add foo.hpp bar.cpp
#   git commit -s foo.hpp bar-cpp

# Step 8
# Update and rebase local copy prior to pushing, eventually resolve conflicts
# (short version of the two commands: "git pull")
git fetch -v
git rebase -v origin/master

# Step 9
# Publish them by pushing them to the main repository
git push

# Commit Rules:
# - File format:
#   - All text files have to be in plain ASCII format.
#   - The line endings of ASCII files must be of UNIX-format ('\n').
#   - There must not be any trailing white space and no blank line at the end
#     of the file.
#   - If your editor is not able to automatically meet the two previous
#     conditions, then you have to use another editor to modify the files.
#     Examples:
#     - Windows, notepad++ v5.7 (http://www.notepad-plus-plus.org):
#         select all (CTRL+a)
#         menu "Edit --> EOL conversion --> UNIX-Format"
#         menu "Edit --> Trim Trailing Space"
#     - Unix, vi(m):
#         Use ":%s/\s\+$//" to remove all trailing whitespaces.
#         For details on how to detect and avoid them, refer to
#         http://vim.wikia.com/wiki/Remove_unwanted_spaces
#     - Unix, (x)emacs:
#         ... (missing)
#     - Mac, (missing):
#         ... (missing)
#     - all platforms, jedit v4.3:
#         select all (CTRL+a)
#         menu "Utilities --> Buffer options... --> Line separator --> Unix (\n)"
#         menu "Edit --> Indent --> Remove Trailing Whitespace"
# - Commit message:
#   - The commit messages must not be empty.
#   - Summarise your commit in one leading line with up to 78 characters, using
#     one of the following prefixes:
#
#       BUG:   Bug fix
#       COMP:  Fixed compiler error or warning
#       DOC:   Changed a comment
#       ENH:   Feature Implementation
#       STYLE: Coding style change (indenting, braces, non-bug or feature change)
#
#   - If you want to provide details about your changes (which is HIGHLY
#     RECOMMENDED!), use an empty line as separator and then describe your
#     changes as detailed as appropriate.
#     Golden rule: As long as necessary, as brief as possible!
#     (German: So lang wie noetig, so kurz wie moeglich!)
#   - Example:
#
#       ENH: implemented new feature
#
#       When using bla it was not possible to blub. The now implemented
#       feature allows to blub and bla so that one can bla blub bla blub.
#
#   - Commit must be signed (option "-s"): git commit -s foo.hpp
#   - If any of the above rules is violated, the commit is automatically
#     rejected!

# Useful git commands and tricks:
#
# - Add file to local(!) repository:
#     git add foo.hpp
#     git commit
# - Remove file from local(!) repository:
#     git rm foo.hpp
#     git commit
# - Push local commits to the remote repository:
#     git push
#   ("git commit" *plus* "git push" is equivalent to "cvs commit"/"svn commit".)
# - Update local copy prior to pushing, eventually resolve conflicts:
#     git fetch
#     git rebase origin/master
#   Short version (equivalent to "cvs update" or "svn update"):
#     git pull
# - Let git be more verbose: option -v. Examples:
#     git pull -v
# - Let git tell you what *would* happen if you ran a command:
#   option --dry-run or -n (not available for all commands). Examples:
#     git push -n
#     git commit --dry-run
# - See detailed changes that are not yet committed:
#     git diff
# - See only the files that contain changes not yet committed:
#     git diff --name-status
# - Set aliases for git. Examples:
#     git config alias.remove rm
#        --> type "git remove" instead of "git rm"
#     git config alias.changes "diff --name-status"
#        --> type "git changes" to list all files that contain changes not yet committed.
# - See git configuration (aliases, user name, email, ...):
#     git config --list
# ... (to be continued)
